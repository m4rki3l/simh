;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;;
;;        DO NOT EDIT!!!!!! THIS TEST WAS GENERATED BY we32as.rb            ;;
;;                                                                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

set cpu history=100
set quiet
set nomessage
set on
on afail goto failure

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 0: ADDW3 should add results - No Carry or Overflow...

; SETUP
d pc 2000000

d psw 81e104
d r0 fffffff0
d r1 f
d r2 0

; ADDW3 %r0,%r1,%r2
dep -b 2000000 dc
dep -b 2000001 40
dep -b 2000002 41
dep -b 2000003 42

; Execute the instruction
STEP

; ASSERTS
ASSERT r2=ffffffff
ASSERT psw=a1e104

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 1: ADDW3 should add results - Carry Set...

; SETUP
d pc 2000000

d psw 81e104
d r0 ffffffff
d r1 1
d r2 0

; ADDW3 %r0,%r1,%r2
dep -b 2000000 dc
dep -b 2000001 40
dep -b 2000002 41
dep -b 2000003 42

; Execute the instruction
STEP

; ASSERTS
ASSERT r2=0
ASSERT psw=95e104

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 2: ADDW3 should add results - Overflow Set...

; SETUP
d pc 2000000

d psw 81e104
d r0 7fffffff
d r1 1
d r2 0

; ADDW3 %r0,%r1,%r2
dep -b 2000000 dc
dep -b 2000001 40
dep -b 2000002 41
dep -b 2000003 42

; Execute the instruction
STEP

; ASSERTS
ASSERT r2=80000000
ASSERT psw=a9e104

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 3: ALSW3 should left shift word...

; SETUP
d pc 2000000

d r0 8f0fdffd

; ALSW3 &2,%r0,%r0
dep -b 2000000 c0
dep -b 2000001 02
dep -b 2000002 40
dep -b 2000003 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=3c3f7ff4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 4: CLRW should clear word...

; SETUP
d pc 2000000

d psw 0
d r0 12345678

; CLRW %r0
dep -b 2000000 80
dep -b 2000001 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=0
ASSERT psw=100004

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 5: LLSH3 should shift and zero pad...

; SETUP
d pc 2000000

d r0 1

; LLSH3 &2,%r0,%r0
dep -b 2000000 d2
dep -b 2000001 02
dep -b 2000002 40
dep -b 2000003 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 6: LLSH3 should shift and one pad...

; SETUP
d pc 2000000

d r0 0f0fdffd

; LLSH3 &2,%r0,%r0
dep -b 2000000 d2
dep -b 2000001 02
dep -b 2000002 40
dep -b 2000003 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=ffff7ff4

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 7: MOVB should fill padding correctly: int value...

; SETUP
d pc 2000000

; MOVB &-1,%r0
dep -b 2000000 87
dep -b 2000001 ff
dep -b 2000002 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=ffffffff

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 8: MOVB should fill padding correctly: byte value...

; SETUP
d pc 2000000

; MOVB {byte}&-1,%r0
dep -b 2000000 87
dep -b 2000001 e3
dep -b 2000002 ff
dep -b 2000003 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=ffffffff

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 9: MOVB should fill padding correctly: halfword value...

; SETUP
d pc 2000000

; MOVB {uhalf}&-1,{byte}%r7
dep -b 2000000 87
dep -b 2000001 e2
dep -b 2000002 ff
dep -b 2000003 e3
dep -b 2000004 47

; Execute the instruction
STEP

; ASSERTS
ASSERT r7=ffffffff

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 10: ORW3 should OR correctly to a new register...

; SETUP
d pc 2000000

d r0 01010101
d r1 10101010

; ORW3 %r0,%r1,%r2
dep -b 2000000 f0
dep -b 2000001 40
dep -b 2000002 41
dep -b 2000003 42

; Execute the instruction
STEP

; ASSERTS
ASSERT r2=11111111

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 11: ORW3 should OR correctly to the same register...

; SETUP
d pc 2000000

d r0 01010101
d r1 10101010

; ORW3 %r0,%r1,%r1
dep -b 2000000 f0
dep -b 2000001 40
dep -b 2000002 41
dep -b 2000003 41

; Execute the instruction
STEP

; ASSERTS
ASSERT r1=11111111

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 12: EXTFW should extract a bitfield...

; SETUP
d pc 2000000

d r0 00000000
d r1 01234567

; EXTFW &10,&4,%r1,%r0
dep -b 2000000 cc
dep -b 2000001 0a
dep -b 2000002 04
dep -b 2000003 41
dep -b 2000004 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=456

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 13: INSFW should insert a bitfield...

; SETUP
d pc 2000000

d r0 abcdef01
d r1 00000567

; INSFW &11,&8,%r1,%r0
dep -b 2000000 c8
dep -b 2000001 0b
dep -b 2000002 08
dep -b 2000003 41
dep -b 2000004 40

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=abc56701

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ECHO TEST 14: MOVBLW should move all words and leave r0,r1,r2 in correct states...

; SETUP
d pc 2000000

d 02002100 5
d 02002104 10
d 02002108 20
d 0200210c 30
d r0 2002100
d r1 2002200
d r2 3

; MOVBLW
dep -b 2000000 30
dep -b 2000001 19

; Execute the instruction
STEP

; ASSERTS
ASSERT r0=200210c
ASSERT r1=200220c
ASSERT r2=0
ASSERT 2002200=5
ASSERT 2002204=10
ASSERT 2002208=20
ASSERT 200220c=0

:success
echo =======
echo SUCCESS
echo =======

quit

:failure
echo =======
echo FAILURE
echo =======
show history=1

